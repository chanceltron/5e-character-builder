// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    characters    Character[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// * 5e Character Model

model Character {
    id        Int       @id @default(autoincrement())
    name      String
    race      Race      @relation(fields: [raceId], references: [id])
    raceId    Int
    class     Class     @relation(fields: [classId], references: [id])
    classId   Int
    abilities Ability[]
    skills    Skill[]
    items     Item[]
    feats     Feat[]
    spells    Spell[]
    user      User      @relation(fields: [userId], references: [id])
    userId    String
}

model Race {
    id          Int         @id @default(autoincrement())
    name        String
    description String
    characters  Character[]
}

model Class {
    id          Int         @id @default(autoincrement())
    name        String
    description String
    characters  Character[]
}

model Ability {
    id          Int       @id @default(autoincrement())
    name        String
    score       Int
    character   Character @relation(fields: [characterId], references: [id])
    characterId Int
}

model Skill {
    id          Int       @id @default(autoincrement())
    name        String
    level       Int
    character   Character @relation(fields: [characterId], references: [id])
    characterId Int
}

model Item {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    character   Character @relation(fields: [characterId], references: [id])
    characterId Int
}

model Feat {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    character   Character @relation(fields: [characterId], references: [id])
    characterId Int
}

model Spell {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    character   Character @relation(fields: [characterId], references: [id])
    characterId Int
}
